
@using DevTest.Blazor.DataAccess;
@using DevTest.Blazor.Models;
@using DevTest.Blazor.Utilities.Utilities;
@using Refit;
@inherits LayoutComponentBase
@inject ILocalStorage LocalStorage
@inject DevTest.Blazor.DataAccess.IDevReg DevReg;
@inject IJSRuntime JsRuntime

<CascadingValue Value="this">
	<div class="page">
		<div class="sidebar">
			<NavMenu />
		</div>

		<main>
			<div class="top-row px-4">
				<div style="width:70px;text-align:right;">
					@if (loggedIn)
					{
						<a class="btn btn-sm btn-primary text-white" title="Account" href="account"><span class="oi oi-key"></span></a>
						<button class="btn btn-sm btn-danger" title="Logout" @onclick="Logout"><span class="oi oi-account-logout"></span></button>
					}
					else
					{
						<button class="btn btn-sm btn-success" title="Login" @onclick="OpenLogin"><span class="oi oi-account-login"></span></button>
					}
				</div>
			</div>

			<article class="content px-4">
				@Body
			</article>
		</main>
	</div>

</CascadingValue>

<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Developer Profile</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<div class="mb-3">
					<label for="loginEmail" class="form-label">Email</label>
					<input type="email" class="form-control" id="loginEmail" placeholder="DevTestUser" autocomplete="off" required @bind-value="user" />
				</div>
				<div class="mb-3">
					<label for="loginPassword" class="form-label">Password</label>
					<input type="password" class="form-control" placeholder="DevTestPassword" id="loginPassword" required @bind-value="password" />
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-success" @onclick="Login">Login</button>
				<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
			</div>
		</div>
	</div>
</div>


@code {

	private bool show, display, loggedIn;
	private string? user,password;
	private ProfileModel? profileModel;
	private AuthModel? token;

	public ProfileModel? GetUser()
	{
		return loggedIn ? profileModel : null;
		}

	public async Task OpenLogin()
	{
		display = true;
		await Task.Delay(100);
		show = true;
		}

	public async Task Logout()
	{
		user = null;
		token = null;
		loggedIn = false;
		await LocalStorage.RemoveAsync("token");
		await LocalStorage.RemoveAsync("user");
		}

	private async Task Close()
	{
		show = false;
		await Task.Delay(500);
		display = false;
		}

	private async Task Login()
	{
		try {
			if (!string.IsNullOrEmpty(user) && !string.IsNullOrEmpty(password)) {
				await Close();

				var token = await DevReg.GetUserLogin(new Models.UserLoginModel { Username = user, Password = password });
				var api = RestService.For<IDevReg>("https://api.devreg.org/api/v1", new RefitSettings() {
						AuthorizationHeaderValueGetter = () =>
							Task.FromResult(token.Token)
						});

				profileModel = await api.GetProfile();

				loggedIn = true;
				await LocalStorage.SaveStringAsync("token", token.Token);
				await LocalStorage.SaveStringAsync("user", profileModel.ToString());
				}
			else {
				await JsRuntime.InvokeVoidAsync("alert", "Please input username and password");
				}
			}
		catch (Exception ex) {

			await JsRuntime.InvokeVoidAsync("alert",ex.Message);
			}

		}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		var authToken = await LocalStorage.GetStringAsync("token");
		loggedIn = !string.IsNullOrEmpty(authToken);
		}
}

